#!/usr/bin/env python2

import rospy
from hri_safety_sense.msg import EstopStatus
from kinova_msgs.srv import Start, Stop, ClearTrajectories, SetTorqueControlMode
from rocoma_msgs.msg import ControllerManagerState

def stop():
    try:
        srv_mode(state=0)
    except rospy.service.ServiceException:
        pass
    srv_stop()
    try:
        srv_traj()
    except rospy.service.ServiceException:
        pass

def start():
    srv_start()

def callback(msg):
    global stopped
    global stopped_soft
    global received_status
    received_status = True
    if stopped:
        if msg.EstopStatus == 0:
            if stopped_soft:
                print("E-Stop cleared, soft E-Stop active!")
            else:
                start()
                print("Resumed!")
            stopped = False
    else:
        if msg.EstopStatus != 0:
            stop()
            stopped = True
            print("E-Stopped!")

def callback_soft(msg):
    global stopped
    global stopped_soft
    if stopped_soft:
        if msg.estop_cleared:
            if not stopped:
                start()
                print("Resumed after soft E-Stop!")
            else:
                print("Cleared soft E-Stop!")
            stopped_soft = False
    else:
        if not msg.estop_cleared:
            if not stopped:
                stop()
            stopped_soft = True
            print("Soft E-Stopped!")
if __name__ == '__main__':
    try:
        rospy.init_node('estop')

        print("Waiting for services")

        prefix = rospy.get_param('~robot_name_prefix', 'j2s6s200')
        rospy.wait_for_service(prefix + '/in/stop')
        rospy.wait_for_service(prefix + '/in/start')
        rospy.wait_for_service(prefix + '/in/clear_trajectories')
        rospy.wait_for_service(prefix + '/in/set_torque_control_mode')
        srv_stop = rospy.ServiceProxy(prefix + '/in/stop', Stop)
        srv_start = rospy.ServiceProxy(prefix + '/in/start', Start)
        srv_traj = rospy.ServiceProxy(prefix + '/in/clear_trajectories', ClearTrajectories)
        srv_mode = rospy.ServiceProxy(prefix + '/in/set_torque_control_mode', SetTorqueControlMode)

        stopped = False
        received_status = True
        stopped_soft = False

        rospy.Subscriber("~input", EstopStatus, callback)
        rospy.Subscriber("~input_soft", ControllerManagerState, callback_soft)

        rate = rospy.Rate(0.5)

        print("Started")

        while not rospy.is_shutdown():
            if not received_status and not stopped:
                stop()
                stopped = True
                print("Timed out!")
            received_status = False
            rate.sleep()

        print("Done!")
    except rospy.ROSInterruptException:
        print("Terminated!")